import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import requests
import random


# Функция для загрузки вопросов с API
def load_questions_from_api():
    response = requests.get('https://opentdb.com/api.php?amount=10&category=31&type=multiple')
    data = response.json()
    questions = []
    for item in data['results']:
        question = {
            "question": item['question'],
            "options": item['incorrect_answers'] + [item['correct_answer']],
            "correct_option": item['correct_answer']
        }
        questions.append(question)
    return questions


# Загрузка вопросов с API
questions = load_questions_from_api()


# Функция для начала викторины
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['current_question_index'] = 0
    await send_question(update, context)


# Функция для отправки вопроса и вариантов ответов
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_question_index = context.user_data['current_question_index']
    question_data = questions[current_question_index]

    question_text = question_data["question"]
    options = question_data["options"]

    random.shuffle(options)

    keyboard = [
        [InlineKeyboardButton(option, callback_data=option)]
        for option in options
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(question_text, reply_markup=reply_markup)


# Функция для обработки ответа пользователя
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    current_question_index = context.user_data['current_question_index']
    correct_answer = questions[current_question_index]["correct_option"]
    selected_option = query.data

    if selected_option == correct_answer:
        await query.edit_message_text(text=f"Верно! Это было {correct_answer}.")
    else:
        await query.edit_message_text(text=f"Неправильно. Правильный ответ: {correct_answer}.")

    if current_question_index + 1 < len(questions):
        context.user_data['current_question_index'] += 1
        await send_question(update, context)
    else:
        await query.message.reply_text("Квиз завершен. Спасибо за игру!")


# Основная функция
def main():
    # Вставьте сюда ваш токен или установите его как переменную окружения
    token = os.getenv("TELEGRAM_TOKEN", "ВАШ_ТОКЕН_ТЕЛЕГРАМ_БОТА")  # используйте свой токен вместо "ВАШ_ТОКЕН_ТЕЛЕГРАМ_БОТА"
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start_quiz))
    application.add_handler(CallbackQueryHandler(handle_answer))

    application.run_polling()


if __name__ == '__main__':
    main()