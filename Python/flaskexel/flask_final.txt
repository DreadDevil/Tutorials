Для создания админки, которая позволит управлять пользователями и их правами, мы можем добавить функционал администрирования с возможностью создания, редактирования и удаления пользователей, а также назначения ролей и прав доступа к таблицам.

Для реализации админки добавим следующие шаги:

Форма для создания и редактирования пользователей.
Интерфейс админки, доступный только пользователям с ролью "admin".
Возможность назначения прав к таблицам для пользователей.
Полный процесс и шаги для добавления админки
Шаг 1: Добавление маршрутов для администрирования
app.py
Добавим маршруты для создания и редактирования пользователей.
В админке будет возможность просматривать всех пользователей, добавлять новых, а также назначать им права доступа к таблицам.
python
Копировать код
from flask import Flask, render_template, redirect, url_for, request, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_migrate import Migrate
from config import Config
from forms import LoginForm, UserForm, TableAccessForm
from models import User, Role, TableAccess

# Инициализация приложения Flask
app = Flask(__name__)
app.config.from_object(Config)

# Инициализация базы данных
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Инициализация LoginManager для аутентификации
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = "Please log in to access this page."

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Главная страница
@app.route('/')
def index():
    return render_template('index.html')

# Страница логина
@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid username or password')
    return render_template('login.html', form=form)

# Выход из системы
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

# Панель управления для просмотра таблиц
@app.route('/dashboard')
@login_required
def dashboard():
    if current_user.role.name == 'admin':
        tables = TableAccess.query.all()
    elif current_user.role.name == 'editor':
        tables = TableAccess.query.filter_by(user_id=current_user.id)
    else:
        tables = TableAccess.query.filter_by(user_id=current_user.id, access_type='read')

    return render_template('dashboard.html', tables=tables)

# Страница админки - просмотр всех пользователей
@app.route('/admin')
@login_required
def admin():
    if current_user.role.name != 'admin':
        return redirect(url_for('dashboard'))

    users = User.query.all()
    return render_template('admin.html', users=users)

# Создание нового пользователя
@app.route('/admin/create_user', methods=['GET', 'POST'])
@login_required
def create_user():
    if current_user.role.name != 'admin':
        return redirect(url_for('dashboard'))

    form = UserForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, role_id=form.role.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('User created successfully.')
        return redirect(url_for('admin'))
    return render_template('create_user.html', form=form)

# Редактирование прав пользователя
@app.route('/admin/edit_access/<int:user_id>', methods=['GET', 'POST'])
@login_required
def edit_access(user_id):
    if current_user.role.name != 'admin':
        return redirect(url_for('dashboard'))

    user = User.query.get(user_id)
    form = TableAccessForm()

    if form.validate_on_submit():
        table_access = TableAccess(user_id=user_id, table_name=form.table_name.data, access_type=form.access_type.data)
        db.session.add(table_access)
        db.session.commit()
        flash('Access updated successfully.')
        return redirect(url_for('admin'))

    return render_template('edit_access.html', form=form, user=user)

if __name__ == '__main__':
    app.run(debug=True)
Шаг 2: Модели данных (Пользователи, Роли, Права)
Добавим роли и таблицу для прав доступа к данным. Это позволяет администратору изменять права на редактирование или чтение данных для каждого пользователя.

models.py
python
Копировать код
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from app import db

# Таблица для ролей
class Role(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)

# Таблица пользователей
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    role_id = db.Column(db.Integer, db.ForeignKey('role.id'))
    role = db.relationship('Role')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

# Таблица для доступа к таблицам
class TableAccess(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    table_name = db.Column(db.String(64))
    access_type = db.Column(db.String(16))  # 'read', 'edit', 'none'
    user = db.relationship('User')
Шаг 3: Формы для создания пользователей и назначения прав
Создаём формы для создания новых пользователей и управления правами.

forms.py
python
Копировать код
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, SelectField
from wtforms.validators import DataRequired
from models import Role

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Log In')

# Форма для создания пользователя
class UserForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    role = SelectField('Role', choices=[(role.id, role.name) for role in Role.query.all()])
    submit = SubmitField('Create User')

# Форма для назначения прав
class TableAccessForm(FlaskForm):
    table_name = StringField('Table Name', validators=[DataRequired()])
    access_type = SelectField('Access Type', choices=[('read', 'Read Only'), ('edit', 'Edit')])
    submit = SubmitField('Update Access')
Шаг 4: Шаблоны HTML для админки
Создадим необходимые HTML-шаблоны для управления пользователями и их доступом.

templates/admin.html
html
Копировать код
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Admin Panel</title>
  </head>
  <body>
    <h1>Admin Panel</h1>
    <h2>Users:</h2>
    <ul>
      {% for user in users %}
        <li>{{ user.username }} - Role: {{ user.role.name }}
            <a href="{{ url_for('edit_access', user_id=user.id) }}">Edit Access</a>
        </li>
      {% endfor %}
    </ul>
    <a href="{{ url_for('create_user') }}">Create New User</a>
  </body>
</html>
templates/create_user.html
html
Копировать код
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Create User</title>
  </head>
  <body>
    <h1>Create User</h1>
    <form method="POST" action="{{ url_for('create_user') }}">
      {{ form.hidden_tag() }}
      <p>{{ form.username.label }} {{ form.username }}</p>
      <p>{{ form.password.label }} {{ form.password }}</p>
      <p>{{ form.role.label }} {{ form.role }}</p>
      <p>{{ form.submit }}</p>
    </form>
  </body>
</html>
templates/edit_access.html
html
Копировать код
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Edit Access</title>
  </head>
  <body>
    <h1>Edit Access for {{ user.username }}</h1>
    <form method="POST" action="{{ url_for('edit_access', user_id=user.id) }}">
      {{ form.hidden_tag() }}
      <p>{{ form.table_name.label }} {{ form.table_name }}</p>
      <p>{{ form.access_type.label }} {{ form.access_type }}</p>
      <p>{{ form.submit }}</p>
    </form>
  </body>
</html>
Шаг 5: Миграции базы данных
Выполните миграции базы данных для добавления таблиц пользователей, ролей и прав:

bash
Копировать код
flask db init
flask db migrate -m "Add user roles and access tables"
flask db upgrade
Этот процесс добавляет полноценную админку для управления пользователями и их правами к таблицам.