Давайте разберёмся, как создать полноценное приложение на Flask с поддержкой MySQL, авторизацией и ролями пользователей. Приложение будет включать:

Уровни доступа к таблицам для пользователей.
Авторизацию с помощью логина и пароля.
Базу данных MySQL.
Деплой на сервере.
Вот полный пошаговый план, с объяснением каждого шага и полным кодом.

Шаг 1: Установка необходимых пакетов
Убедитесь, что на вашем сервере или локальной машине установлены следующие компоненты:

Python (версия 3.6+)
MySQL (установите MySQL и настройте его)
Установите необходимые библиотеки Python:

bash
Копировать код
pip install Flask Flask-SQLAlchemy Flask-Migrate Flask-Login pymysql
Flask-SQLAlchemy — ORM для работы с базой данных.
Flask-Migrate — инструмент для миграций базы данных.
Flask-Login — для аутентификации пользователей.
PyMySQL — драйвер для подключения к MySQL.
Шаг 2: Настройка MySQL
Создайте базу данных MySQL:

sql
Копировать код
CREATE DATABASE flask_app_db;
Замените flask_app_db на любое название, которое вам подходит.

Создайте пользователя и выдайте права на эту базу:

sql
Копировать код
CREATE USER 'flask_user'@'localhost' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON flask_app_db.* TO 'flask_user'@'localhost';
FLUSH PRIVILEGES;
Шаг 3: Создание структуры проекта
Создайте структуру проекта, как показано ниже:

arduino
Копировать код
flask_app/
│
├── app.py
├── config.py
├── models.py
├── forms.py
├── templates/
│   ├── index.html
│   ├── login.html
│   └── dashboard.html
├── migrations/
├── venv/
Шаг 4: Настройка конфигурации приложения
Создайте файл config.py, чтобы настроить приложение и подключение к MySQL.

config.py
python
Копировать код
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'my_secret_key'
    
    # Конфигурация для MySQL
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'mysql+pymysql://flask_user:your_password@localhost/flask_app_db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
Шаг 5: Модели данных (Пользователи, Роли, Доступ)
Создайте файл models.py для определения моделей базы данных.

models.py
python
Копировать код
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from app import db

# Таблица для ролей (admin, editor, viewer)
class Role(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)

# Таблица пользователей
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    role_id = db.Column(db.Integer, db.ForeignKey('role.id'))
    role = db.relationship('Role')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

# Таблица для доступа к данным (определение доступа к таблицам)
class TableAccess(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    table_name = db.Column(db.String(64))
    access_type = db.Column(db.String(16))  # 'read', 'edit', 'none'
    user = db.relationship('User')
Шаг 6: Настройка приложения и аутентификации
app.py
python
Копировать код
from flask import Flask, render_template, redirect, url_for, request, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_migrate import Migrate
from config import Config
from forms import LoginForm
from models import User, Role, TableAccess

# Инициализация приложения Flask
app = Flask(__name__)
app.config.from_object(Config)

# Инициализация базы данных
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Инициализация LoginManager для аутентификации
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = "Please log in to access this page."

# Подключение модели пользователя для LoginManager
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Маршрут для главной страницы
@app.route('/')
def index():
    return render_template('index.html')

# Маршрут для страницы логина
@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid username or password')
    return render_template('login.html', form=form)

# Маршрут для выхода из системы
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

# Маршрут для панели управления
@app.route('/dashboard')
@login_required
def dashboard():
    if current_user.role.name == 'admin':
        tables = TableAccess.query.all()
    elif current_user.role.name == 'editor':
        tables = TableAccess.query.filter_by(role_id=current_user.role_id)
    else:
        tables = TableAccess.query.filter_by(role_id=current_user.role_id, access_type='read')

    return render_template('dashboard.html', tables=tables)

if __name__ == '__main__':
    app.run(debug=True)
Шаг 7: Форма для логина
forms.py
python
Копировать код
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Log In')
Шаг 8: Шаблоны HTML
Создайте шаблоны для логина, главной страницы и панели управления.

templates/index.html
html
Копировать код
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Flask App</title>
  </head>
  <body>
    <h1>Welcome to Flask App</h1>
    <a href="{{ url_for('login') }}">Login</a>
  </body>
</html>
templates/login.html
html
Копировать код
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Login</title>
  </head>
  <body>
    <h1>Login</h1>
    <form method="POST" action="{{ url_for('login') }}">
      {{ form.hidden_tag() }}
      <p>{{ form.username.label }} {{ form.username }}</p>
      <p>{{ form.password.label }} {{ form.password }}</p>
      <p>{{ form.submit }}</p>
    </form>
  </body>
</html>
templates/dashboard.html
html
Копировать код
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Dashboard</title>
  </head>
  <body>
    <h1>Dashboard</h1>
    <p>User: {{ current_user.username }}</p>
    <p>Role: {{ current_user.role.name }}</p>
    <h2>Tables:</h2>
    <ul>
      {% for table in tables %}
        <li>{{ table.table_name }} - {{ table.access_type }}</li>
      {% endfor %}
    </ul>
    <a href="{{ url_for('logout') }}">Logout</a>
  </body>
</html>
Шаг 9: Миграции базы данных
Выполните миграции для создания таблиц:

bash
Копировать код
flask db init
flask db migrate -m "Initial migration"
flask db upgrade
Шаг 10: Запуск приложения
Запустите приложение:

bash
Копировать код
python app.py
Теперь ваше приложение будет доступно по адресу http://localhost:5000.