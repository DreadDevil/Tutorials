https://minikube.sigs.k8s.io/docs/start/

https://kubernetes.io/docs/reference/kubectl/overview/#operations

https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#exec

kubectl exec my-pod -- ps aux

kubectl exec skillfactory -c nginx -- uptime

kubectl edit pod skillfactory

Stop your Minikube cluster by running the following command:
vbnet
Copy code
minikube stop
Start your Minikube cluster again with the --network-plugin=cni flag:
sql
Copy code
minikube start --network-plugin=cni
Verify that the CNI plugin is running by running the following command:
sql
Copy code
kubectl get pods -n kube-system

Kind (Kubernetes IN Docker) является инструментом для создания локальных кластеров Kubernetes, используя контейнеры Docker в качестве узлов кластера. Он предоставляет простой и быстрый способ развернуть кластер Kubernetes для разработки и тестирования приложений, используя контейнеры Docker в качестве среды выполнения.

Однако, сообщество Kubernetes объявило, что Docker в качестве среды выполнения контейнеров будет объявлен как устаревший и не будет использоваться в K8S-кластере. Это означает, что использование Docker в качестве среды выполнения контейнеров в Kubernetes будет заменено на другие среды выполнения контейнеров, такие как containerd или CRI-O.

Тем не менее, Kind не должен быть затронут этим изменением, потому что Kind не использует Docker в качестве среды выполнения контейнеров в Kubernetes. Вместо этого, Kind использует Docker как инструмент для создания и управления контейнерами, которые запускаются в качестве узлов кластера Kubernetes.

Таким образом, Kind будет продолжать работать с Kubernetes, даже после того, как Docker будет объявлен устаревшим и перестанет использоваться в качестве среды выполнения контейнеров в Kubernetes.

Для выполнения команд с помощью kubectl используется такой порядок:

kubectl [command] [TYPE] [NAME] [flags]

command: говорит о том, какую операцию или какое действие мы будем совершать с объектом, например: create, get, describe, delete.
TYPE: говорит о типе ресурса, этой темы мы коснемся в следующем юните.
Например, типом ресурса может быть pod.
NAME: отвечает за имя ресурса. Это имя собственное, оно может быть любым в рамках соглашений о именовании в K8S. Имена чувствительны к регистру. Если никакое имя не указано, то отображаются подробности — все имена ресурсов этого типа.
flags: определяет дополнительные флаги, параметры. Например, можно указать флаг с аргументом -o yaml, что будет означать — «сделай вывод объекта в формате YAML».
В этом юните мы не будем рассматривать все возможные опции этой утилитой, детали доступны на официальной странице.

kubectl config get-contexts  # показать список контекстов

kubectl config current-context  # показать текущий контекст (current-context)

kubectl config use-context my-cluster-name  # установить my-cluster-name как контекст по умолчанию

Пространства имён или неймспейс (namespace) — это ещё один способ разделения ресурсов и сущностей в кластере.
С помощью этого разделения можно:

сгруппировать ресурсы по назначению;
разделять по лимиту потребления;
создавать другие ограничения, например, с точки зрения безопасности и доступа к другим ресурсам.
В каждый момент времени после настройки подключения к кластеру у вас используется текущий контекст и текущий неймспейс.

Не забывайте переключаться на нужный контекст и неймспейс. Так, например, если при создании нового ресурса с помощью kubectl не будет указан неймспейс, где нужно создать ресурс, то он будет создан в текущем неймспейсе.

Нам нужно посмотреть логи конкретного контейнера:
kubectl logs my-pod  # посмотреть логи пода (в stdout)
kubectl logs -l name=myLabel  # посмотреть логи пода с меткой myLabel
Важная особенность логирования в K8S — возможность посмотреть логи предыдущего контейнера. Это очень полезно в случае анализа причин некорректного поведения приложения.
Если в поде несколько контейнеров, то нужно указать, из какого контейнера мы хотим посмотреть логи. Если в поде всего один контейнер, то он будет выбран автоматически и можно дополнительно не указывать флаг с именем контейнера.
kubectl logs my-pod --previous  # посмотреть логи пода по предыдущему экземпляру контейнера
kubectl logs my-pod -c my-container --previous  # посмотреть логи контейнера пода (при наличии несколькими контейнеров в поде) по предыдущему экземпляру контейнера
Важный момент — анализ логов в онлайн-режиме по мере их поступления. По аналогии работы логов в Docker, в K8S это также возможно. Можно посмотреть логи из всех контейнеров сразу, что тоже бывает полезным.
kubectl logs -f my-pod  # вывести логи пода в режиме реального времени (в stdout)
kubectl logs -f my-pod -c my-container  # вывести логи контейнера пода в режиме реального времени (в stdout, при работе с несколькими контейнерами)
kubectl logs -f -l name=myLabel --all-containers  # вывести логи всех подов с меткой myLabel (в stdout)

kubectl exec mypod -c ruby-container -it -- bash

mypod — имя пода.
ruby-container — имя контейнера.
-it — эти флаги означают работу с оболочкой bash в интерактивном режиме.
В общем виде команда выглядит вот так:

kubectl exec (POD) [-c CONTAINER] [flags] -- COMMAND [args...]

Как и в предыдущем примере, в этой команде мы указываем следующие параметры:

exec — выполни что-то внутри контейнера.
POD — имя пода.
-c CONTAINER — имя контейнера, опционально.
flags — опционально, по ссылке ниже можно посмотреть все доступные флаги.
COMMAND — команда, которую нужно выполнить внутри пода и аргументы для нее.

Этот способ является императивным и нужен для описанных выше кейсов.

Команда в общем случае выглядит так:

kubectl edit (RESOURCE/NAME | -f FILENAME) [flags]

edit — говорим, что мы хотим отредактировать ресурс.
RESOURCE/NAME | -f FILENAME — можем либо указать имя ресурса, который хотим отредактировать, или указать путь до файла с описание ресурса, который мы хотим отредактировать.

Интересный нюанс: в качестве файла мы можем указать URL до файла, например, в GitHub.
flags — опционально флаги.
Интересной особенностью является то, что при попытке сохранить изменения K8S проводит базовую валидацию на опечатки и другие базовые проверки, т. е. если у вас есть где-то опечатка, то K8S не даст вам внести изменения.

Другая особенность — открытие редактор по умолчанию, в Linux зачастую это VIM.

Более подробно про флаги и аргументы можно почитать здесь.

Например, чтобы отредактировать лейблы в сервисе, нам нужно выполнить такую команду:

kubectl edit svc/docker-registry # Отредактировать сервис docker-registry
edit — говорим о том, что мы хотим отредактировать ресурс;
svc — тип ресурса;
docker-registry — собственное имя ресурса.
После ввода этой команды откроется редактор по умолчанию, нужно внести изменения, сохранить их и K8S попытается их применить.
